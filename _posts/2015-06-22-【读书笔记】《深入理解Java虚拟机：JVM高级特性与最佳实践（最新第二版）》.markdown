---
layout:     post
title:      "【读书笔记】《深入理解Java虚拟机：JVM高级特性与最佳实践（最新第二版）"
subtitle:   "第二章：自动内存管理机制"
date:       2015-06-22 00:00:00
author:     "Kei Wu"
header-img: "img/post-bg-03.jpg"
---

### Java内存区域
<font color=red>程序计数器（Program Counter Register）</font>是一块较小的内存空间，它可以看作是当前线程所执行的字节码的符号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。
如果线程正在执行的是一个Java方法，这个计数器记录的就是正在执行的虚拟机字节码指令的地址，如果执行的是Native方法，这个计数器则为空（Undefined），此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。  
**Java虚拟机栈（Java Virtual Machine Stacks）**也是线程私有的，生命周期与线程相同。每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链表、方法出口等信息。  
**本地方法栈（Native Method Stack）**与虚拟机栈所发挥的作用是非常相似的。区别是虚拟机栈执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。有的虚拟机如Sun HotSpot直接把本地方法栈和虚拟机栈合二为一。  
**Java堆（Java Heap）**是虚拟机管理的内存中最大的一块，是被所有线程共享的一块内存区域。由于垃圾收集器基本都采用分代收集算法，所以Java堆还可以分为新生代和老年代，再细致点分有Eden空间、From Survivor空间、To Survivor空间等。从内存角度来看，线程共享的Java对中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer， TLAB）。进一步划分内存空间是为了更好的回收或者更快的分配内存。  
**方法区（Method Area）**与Java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。别名Non-Heap（非堆），目的是为了跟Java堆区分开来。对于HotSpot虚拟机来讲，人们更愿意把方法区成为“永久代”（Permanent Generation）。HotSpot虚拟机把GC分代收集扩展至方法区，省去为方法区编写内存管理代码的工作。通过-XX:MaxPermSize设置永久代的上限制。（现在逐步改为采用Native Memory来实现方法区了）  
**运行时常量池（Runtime Constant Pool）**是方法区的一部分。用于存放编译期生成的各种字符变量和符号的引用，这部分内存将在类加载后进入常量池。运行期间也有可能将新的常量放入池中，例如String类的inern()方法。  
**直接内存（Direct Memory）**并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但这部分内存也被频繁使用。JDK1.4中新加入的NIO（New Input/Output）类，引入一种基于通道（Channel）与缓冲区的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样避免了Java堆和Native堆中来回复制数据，在一些场景中显著提高性能。  
  

### 对象的创建
虚拟机遇到一条new指令时，先去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查这个符号银哟个代表的类是否已加载、解析和初始化过，没有就先执行相应的加载过程。  
类加载检查通过后，虚拟机将为新生对象分配内存，**对象所需内存大小在加载完成后便可以完全确定**。  
分配内存的两种方式：**假设Java堆中内存是绝对规整的**，所有用过的内存都放在一边，空闲的内存放在另一边，中间放一个指针作为分界点的指示器，那么分配内存就仅仅是把那个指针向空闲空间挪动一段与对象大小相等的距离。这种方式称为**“指针碰撞”（Bump the Pointer）**。如果Java堆中内存并不是规整的，虚拟机就必须维护一个列表记录哪些内存块可用，在分配的时候从列表中找出一块足够大的空间分配给兑现实例，并更新列表上的记录，这种方式成为**“空闲列表”（Free List）**。选择哪种分配方式**由虚拟机所采用的垃圾收集器是否带有压缩整理功能所决定的**。因此使用Serial、ParNew等带有Compact过程的收集器，系统采用的分配算法是指针碰撞，使用CMS这种基于Mark-Sweep算法的收集器，通常采用空闲列表。  
除了如何划分空间之外，在分配内存时还需要考虑并发情况下的线程安全问题，解决这个问题有两种方案：一种是对分配空间的动作进行同步处理——虚拟机**采用CAS配上失败重试的方式保证更新操作的原子性**；另外一种是**把内存分配的动作按照线程划分在不同的空间之中进行**，也就是在上面说到的本地线程分配缓冲区（TLAB）。虚拟机是否使用TLAB可以通过-XX:+/-UseTLAB参数来设定。  
内存分配完成后，虚拟机就将分配到的内存进行初始化为零值（不包括对象头）。如果使用TLAB则在TLAB分配时进行。  
接下来虚拟机要对对象进行**对象头（Object Header）**的信息的设置，如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等。完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从Java程序的视角来看，对象才刚开始，<init>方法还没执行，所有字段都还是零。所以一般执行完new指令之后接着就执行<init>方法。  
  

### 对象的内存布局
在HoSpot虚拟机中，对象在内存中存储的布局分为3块区域：**对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）**。  
HotSpot虚拟机对象头包括两部分信息，第一部分存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标识、线程持有的锁、偏向线程ID、偏向时间戳等。这部分数据长度在32位和64位虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“Mark World”。  
另一部分实例数据是对象真正存储的有效信息。这部分存储顺序会收到虚拟机的分配策略参数（FieldsAllocationStyle）和字段在Java源码中定义顺序的影响。HotSpot默认分配策略：longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointer），相同宽度的字段被分配在一起。满足这一条件下，在负累中定义的变量会出现在子类之前，如果CompactFields为true（默认），则子类中较窄的变量可能会插入到负累变量的空隙之中。  
**第三部分的对齐填充不是必然存在的**，作用是占位符，因为HotSpot要求对象起始地址必须是8字节的整数倍。  
  

### 对象的访问定位
Java程序需要通过栈上的reference数据来操作堆上的具体对象，但由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，所以对象访问方式是取决于虚拟机的实现的。目前主流的访问方式有使用句柄和直接指针两种。  
使用**句柄访问**：Java堆中会划分出一块内存作为句柄池，reference存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息。这种方式最大的好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，reference本身不需要修改。  
使用**直接指针访问**：reference中存储的是对象的地址，而Java堆对象的布局中就要考虑如何放置访问类型数据的相关信息。这种方式的最大好处是速度更快，它节省了一次指针定位的时间开销，HotSpot使用的就是这种方式。  
